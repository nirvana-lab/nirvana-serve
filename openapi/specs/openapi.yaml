openapi: 3.0.0
info:
  description: this is a restful api of dtp
  title: nirvana
  version: 1.0.0
servers:
- url: http://0.0.0.0:9090/api/
  description: 本地调试环境
- url: http://10.10.130.100:9090/api/
  description: 测试环境
tags:
- description: everything about user
  name: user
- description: everything about namespace
  name: namespaces


paths:
  /login:
    post:
      summary: 登陆
      operationId: openapi.api.user.login
      description: 登陆
      tags:
      - user
      requestBody:
        content:
          application/json:
           schema:
             type: object
             properties:
              username:
                type: string
              password:
                type: string
      responses:
        '200':
          description: 登陆成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  detail:
                    type: string
  /register:
    post:
      summary: 注册新用户
      operationId: openapi.api.user.register
      description: 注册新用户
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: 注册成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  detail:
                    type: string

  /namespaces:
    get:
      tags:
      - namespaces
      summary: 获取namespace列表
      operationId: openapi.api.namespace.list
      parameters:
      - name: token
        in: header
        description: 用户的token令牌
        required: true
        schema:
          type: string
      responses:
        '200':
          description: 返回namespace和project的聚合结构
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'

    post:
      tags:
      - namespaces
      summary: 创建namespace
      operationId: openapi.api.namespace.create
      parameters:
      - name: token
        in: header
        description: 用户的token令牌
        required: true
        schema:
          type: string
      requestBody:
        description: 创建命名空间传名称和描述
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/NamespaceBody'
        required: true
      responses:
        200:
          description: ''

  /namespaces/{namespace_id}:
    delete:
      tags:
      - namespaces
      summary: 删除命名空间
      operationId: openapi.api.namespace.delete
      parameters:
      - name: token
        in: header
        description: 用户token令牌
        required: true
        schema:
          type: string
      - name: namespace_id
        in: path
        description: 命名空间id
        required: true
        schema:
          type: string
      responses:
        200:
          description: ''
components:
  schemas:
    NamespaceBody:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Namespace:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    ProjectBody:
      type: object
      properties:
        detail:
          type: object
          properties:
            info:
              type: object
            servers:
              type: array
              items:
                type: string
            tags:
              type: array
              items:
                type: string
        apis:
          type: array
          items:
            $ref: '#/components/schemas/ApiBody'
        models:
          type: array
          items:
            type: object
        envs:
          type: array
          items:
            type: object
        scripts:
          type: array
          items:
            type: object
    ApiBody:
      type: object
      properties:
        path:
          type: string
        tags:
          type: array
          items:
            type: string
        description:
          type: string
        params:
          type: object
        query:
          type: object
        header:
          type: object
        responseBody:
          type: object
          example: {
            name: '123'
          }
        responseBodyType:
          type: object
          example: {
            name: string
          }
        requestBody:
          type: array
          items:
            type: object
            example: {
              code: 200,
              description: '',
              data: {},
            }
    PutProjectBody:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tag:
          type: string
    Project:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        tag:
          type: string